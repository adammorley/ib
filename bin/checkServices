#!/usr/bin/python3
import datetime
import logging
import os
import signal
import supervise
import sys
import time

sys.path.append(r'/home/adam/ibCur')
from market import config

apiKey = None
with open('/home/adam/ibCreds/sendgrid.key', 'r') as f:
    apiKey = f.readline().replace('\n', '')

def sendEmail(serviceName, errorString):
    import sendgrid
    import socket
    addr = 'adam.morley.mobile@gmail.com'
    subject = 'CRITICAL on ' . socket.gethostname() . ' from ' + serviceName
    content = sendgrid.helpers.mail.Content('text/plain', errorString)
    message = sendgrid.helpers.mail.Mail(sendgrid.helpers.mail.Email(addr), sendgrid.helpers.mail.To(addr), subject, content)
    try:
        sg = sendgrid.SendGridAPIClient(apiKey)
        r = sg.send(message)
        if r.status_code != 200 and r.status_code != 202:
            logging.critical('problem sending message: {}'.format(r))
    except Exception as e:
        logging.critical('exception generated: {}'.format(e))

sentMailTime = None
def fatal(serviceName, msg):
    global sentMailTime
    logging.critical(msg)
    now = datetime.datetime.utcnow()
    if sentMailTime == None or sentMailTime is not None and now > sentMailTime + datetime.timedelta(minutes=30):
        sendEmail(serviceName, msg)
        sentMailTime = now
        logging.info('sent email about critical error')
    else:
        logging.info('sent mail recently, waiting to send')

services = config.serviceDirs()
autoOrder_ES = services+'autoOrder_ES'
controller = services+'controller'
allServiceDirs = [autoOrder_ES, controller]

dirToService = {autoOrder_ES: supervise.Service(autoOrder_ES), controller: supervise.Service(controller)}
restarted = {autoOrder_ES: None, controller: None}
first = True

loopSleep=5

logging.basicConfig(level=logging.INFO)
logging.info('watching for crash loops and fatals...')
def term(*args):
    logging.warn('shutting down')
    sys.exit(0)
signal.signal(signal.SIGTERM, term)

while True:
    time.sleep(60)
    if dirToService[controller].status().status != 1:
        fatal(controller, 'gateway is not up: {}'.format(dirToService[controller].status()))

    for d in allServiceDirs:
        if os.path.exists(d+'/'+config.fatalFilename()):
            fatal(d, 'saw a fatal error on {}'.format(d))

        pid0 = dirToService[d].status().pid
        time.sleep(loopSleep)
        pid1 = dirToService[d].status().pid
        if pid0 == pid1:
            restarted[d] = False
        elif pid0 != pid1 and not restarted[d]:
            restarted[d] = True
        elif pid0 != pid1 and restarted[d]:
            fatal(d, 'serivce {} might be crash looping'.format(d))
