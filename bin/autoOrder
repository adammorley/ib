#!/usr/bin/python3
import logging
import pytz
import signal
import sys
from datetime import timedelta

sys.path.append(r'/home/adam/ib')
from market import account
from market import bars
from market import config
from market import connect
from market import contract
from market import data
from market import date
from market import detector
from market import fatal
from market import order
from market import trade

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--conf', type=str, required=True)
parser.add_argument('--debug', action='store_true', default=None)
parser.add_argument('--info', action='store_true', default=None)
args = parser.parse_args()

def isMaxQty(p, conf):
    if conf.byPrice:
        # super wonky: avg cost is avg cost per share
        # .position is share count
        # dollarAmt is the max we'll spend
        # openPositions is the number of amounts
        #  $25 * 4 sh >= $500 * 2
        return p.avgCost * p.position >= conf.dollarAmt * conf.openPositions
    else:
        return p.position >= conf.qty * conf.openPositions

def getPortfolio(wc):
    positions = wc.ibClient.portfolio()
    wc.ibClient.sleep(0)
    for p in positions:
        if p.contract == wc.contract:
            return p
    return None

def outputIfHolding(wc):
    p = getPortfolio(wc)
    if p is not None and p.contract == wc.contract:
        out = ''
        if p.position > 0:
            out += 'holding an open position on {} of {}; '.format(p.contract.symbol, p.position)
        else:
            out += 'no open position on {}; '.format(p.contract.symbol)
        out += 'marketPrice: {} unrealizedPNL: {}, realizedPNL: {}'.format(p.marketPrice, p.unrealizedPNL, p.realizedPNL)
        logging.warn(out)

def waitAndUpdateEMAs(ibc, pauseMinutes, dataStore, dataStream):
    for p in (0, pauseMinutes):
        ibc.sleep(60)
        dataStore.recalcIndicators(dataStream)

def disableWatch(conf, dataStore):
    if conf.detector == 'emaCrossover':
        dataStore.areWatching = False

def checkForExcessiveLosses(wc, conf):
    loss = detector.lossTooHigh(wc, conf)
    if loss:
        fatal.fatal('lost too many dollars, exiting.  {} {} {} {}'.format(conf.maxLoss, wc.pnl, conf.account, wc.contract))

startTime = date.nowInUtc()

logging.warn('starting up...')
def term(*args):
    logging.warn('shutting down')
    sys.exit(0)
signal.signal(signal.SIGTERM, term)

conf = config.getConfig(args.conf, detectorOn=True)
ibc = connect.connect(conf, args.debug)
from ib_insync import util
if args.info:
    util.logToConsole(logging.INFO)
account.summary(ibc, conf.account)

wc = contract.wContract(ibc, conf.symbol, conf.localSymbol)
ibc.reqPnLSingle(account=conf.account, modelCode='', conId=wc.contract.conId) # request updates

dataStore, dataStream = detector.setupData(wc, conf)

errorCount = 0
totalTrades = 0
outputIfHolding(wc)
portfolioCheck = date.nowInUtc()
# what we really want is to extract the "I detected a reason to buy contract n at bar y with reuqirements z"
# and add the es one as well.
logging.warn('running trade loop for %s...', wc.symbol)
while date.nowInUtc() < startTime + timedelta(hours=20):
    if totalTrades >= conf.totalTrades:
        logging.warn('completed total number of trades {}/{}, exiting'.format(totalTrades, conf.totalTrades))
        break
    elif not date.isMarketOpen(wc.details):
        logging.warn('market closed, waiting for open')
        ibc.sleep(60 * 5)
        disableWatch(conf, dataStore)
        continue
    elif not date.isMarketOpen(wc.details, date.nowInUtc() + timedelta(minutes=conf.greyzone)): # closing soon
        logging.warn('market closing soon, waiting for close')
        sleepMins = (date.marketNextCloseTime(wc.details) - date.nowInUtc()).total_seconds() /60
        waitAndUpdateEMAs(ibc, sleepMins, dataStore, dataStream)
        disableWatch(conf, dataStore)
        continue
    elif date.marketOpenedLessThan(wc.details, timedelta(minutes=conf.greyzone)):
        logging.warn('market just opened, waiting')
        minutesOpen = (date.nowInUtc() - date.marketOpenedAt(wc.details)).total_seconds() /60
        waitAndUpdateEMAs(ibc, (conf.greyzone-minutesOpen), dataStore, dataStream)
        disableWatch(conf, dataStore)
        continue

    entryAction, entryPrice = None, None
    if conf.detector == 'threeBarPattern':
        entryPrice = detector.threeBarPattern(dataStore, dataStream, ibc.sleep)
    elif conf.detector == 'emaCrossover':
        try:
            entryAction, entryPrice = dataStore.checkForEntry(dataStream, ibc.sleep)
        except Exception as e:
            fatal.errorAndExit('got an exception while running waitloop: {}'.format(e))

    orderDetails = None
    if entryPrice is not None:
        try:
            orderDetails = order.OrderDetails(entryPrice, conf, wc, entryAction)
        except FloatingPointError as e:
            errorCount += 1
            logging.error('got an NaN during order creation: {} {} {}'.format(e, entryPrice, orderDetails))
            orderDetails = None

    if orderDetails is not None:
        makeTrade = True
        p = getPortfolio(wc)
        if p is not None and p.contract == wc.contract and isMaxQty(p, conf):
            logging.warn('passing on trade as max positions already open')
            makeTrade = False

        orders = order.CreateBracketOrder(orderDetails, conf.account)
        if not order.adequateFunds(orderDetails, orders):
            errorCount += 1
            logging.error('not enough funds to place a trade.')
            makeTrade = False

        if makeTrade:
            trades = trade.PlaceBracketTrade(orders, orderDetails)
            trade.CheckTradeExecution(trades, orderDetails)
            totalTrades += 1
            logging.debug(trades)

    if date.nowInUtc() > portfolioCheck + timedelta(minutes=30):
        portfolioCheck = date.nowInUtc()
        outputIfHolding(wc)

    checkForExcessiveLosses(wc, conf)
    if errorCount > 10:
        fatal.errorAndExit('got excess errors, exiting.')

connect.close(ibc, wc)
sys.exit(0)
