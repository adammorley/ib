#!/usr/bin/python3
import datetime
import logging
import requests
import sendgrid
import signal
import sys
import time

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--debug', action='store_true', default=None)
args = parser.parse_args()

apiKey = None
with open('/home/adam/creds/sendgrid.key', 'r') as f:
    apiKey = f.readline().replace('\n', '')

def sendEmail(serverName, errorString):
    addr = 'adam.morley.mobile@gmail.com'
    subject = 'CRITICAL from ' + serverName
    content = sendgrid.helpers.mail.Content('text/plain', errorString)
    message = sendgrid.helpers.mail.Mail(sendgrid.helpers.mail.Email(addr), sendgrid.helpers.mail.To(addr), subject, content)
    try:
        sg = sendgrid.SendGridAPIClient(apiKey)
        r = sg.send(message)
        if r.status_code != 200 and r.status_code != 202:
            logging.critical('problem sending message: {}'.format(r))
    except Exception as e:
        logging.critical('exception generated: {}'.format(e))

sentMailTime = None
def fatal(serverName, msg):
    global sentMailTime
    logging.critical(msg)
    now = datetime.datetime.utcnow()
    if sentMailTime == None or sentMailTime is not None and now > sentMailTime + datetime.timedelta(minutes=30):
        sendEmail(serverName, msg)
        sentMailTime = now
        logging.info('sent email about critical error')
    else:
        logging.info('sent mail recently, waiting to send')

logging.basicConfig(level=logging.INFO)
logging.info('monitoring servers...')
def term(*args):
    logging.warn('shutting down')
    sys.exit(0)
signal.signal(signal.SIGTERM, term)

port = 8082
servers = {'prod': '35.223.254.203', 'dev': '35.223.254.203', 'app': '35.223.232.154'}
status = {}
for k, _ in servers.items():
    status[k] = True # assume up first pass
while True:
    for server, ip in servers.items():
        url = 'http://' + ip + ':8082'
        c = True
        try:
            r = requests.get(url, timeout=3)
        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout) as e:
            logging.info('got timeout while connecting to {}'.format(ip))
            c = False

        if r.status_code == 200 and c:
            status[server] = True
        elif status[server]:
            status[server] = False
        else:
            fatal(server, 'server {} at ip {} did not respond repeatedly to http ping'.format(server, ip))
    if args.debug:
        print(status)
        sys.exit(0)
    time.sleep(60)
